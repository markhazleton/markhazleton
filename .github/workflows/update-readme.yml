name: Update README with Latest Blog Posts

on:
  schedule:
    # Runs at 12:00 AM UTC every day
    - cron: "0 0 * * *"
  workflow_dispatch: # Allows manual trigger of the workflow
    inputs:
      debug_mode:
        description: 'Enable detailed debug output'
        required: false
        default: false
        type: boolean

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install xmlstarlet
        run: sudo apt-get install -y xmlstarlet

      - name: Debug Network and Fetch Latest Blog Posts
        id: fetch_blog_posts
        run: |
          echo "=== DEBUGGING NETWORK CONNECTIVITY ==="
          
          # Check basic connectivity
          echo "Checking DNS resolution..."
          nslookup markhazleton.com || echo "DNS lookup failed"
          
          echo "Checking basic connectivity..."
          ping -c 3 markhazleton.com || echo "Ping failed"
          
          echo "Checking HTTPS connectivity..."
          curl -I --connect-timeout 10 --max-time 30 https://markhazleton.com/ || echo "HTTPS connection failed"
          
          echo "=== ATTEMPTING RSS DOWNLOAD WITH DETAILED OUTPUT ==="
          
          # Try with verbose output first to see what's happening
          echo "Attempt with verbose output:"
          curl -v --connect-timeout 10 --max-time 30 https://markhazleton.com/rss.xml -o rss.xml 2>&1 || echo "Verbose curl failed"
          
          # Check if file was created and show its content/size
          if [ -f rss.xml ]; then
            echo "RSS file was created, size: $(wc -c < rss.xml) bytes"
            if [ -s rss.xml ]; then
              echo "RSS file has content, first 10 lines:"
              head -10 rss.xml
            else
              echo "RSS file is empty"
            fi
          else
            echo "RSS file was not created"
          fi
          
          # Try alternative approaches
          echo "=== TRYING ALTERNATIVE APPROACHES ==="
          
          # Try with different user agent
          echo "Trying with User-Agent header..."
          curl -s --fail --connect-timeout 10 --max-time 30 \
            -H "User-Agent: Mozilla/5.0 (compatible; GitHub-Action-RSS-Reader/1.0)" \
            https://markhazleton.com/rss.xml -o rss_alt1.xml || echo "User-Agent approach failed"
          
          # Try with wget
          echo "Trying with wget..."
          wget --timeout=30 --tries=1 --user-agent="GitHub-Action-RSS-Reader/1.0" \
            -q -O rss_alt2.xml https://markhazleton.com/rss.xml || echo "wget failed"
          
          # Check which files were created
          echo "=== FILE CHECK ==="
          ls -la *.xml 2>/dev/null || echo "No XML files found"
          
          # Use the best available file
          rss_file=""
          if [ -s rss.xml ]; then
            rss_file="rss.xml"
            echo "Using original rss.xml"
          elif [ -s rss_alt1.xml ]; then
            rss_file="rss_alt1.xml"
            echo "Using rss_alt1.xml (User-Agent version)"
          elif [ -s rss_alt2.xml ]; then
            rss_file="rss_alt2.xml"
            echo "Using rss_alt2.xml (wget version)"
          else
            echo "No valid RSS file could be downloaded"
            exit 1
          fi
          
          echo "=== PARSING RSS FEED ==="
          echo "Using file: $rss_file"
          
          # Show file preview
          echo "RSS file preview:"
          head -20 "$rss_file"
          
          # Parse the RSS feed
          if ! xmlstarlet sel -t -m '//item' -v 'concat("- [", title, "](", link, ")")' -n "$rss_file" | head -8 > latest-posts.md; then
            echo "Failed to parse RSS feed"
            echo "Trying to validate XML structure..."
            xmlstarlet val "$rss_file" || echo "XML validation failed"
            exit 1
          fi
          
          # Verify parsing worked
          if [ ! -s latest-posts.md ]; then
            echo "No blog posts found or RSS feed is empty"
            exit 1
          fi
          
          echo "Successfully parsed RSS feed:"
          cat latest-posts.md

      - name: Update README.md
        run: |
          # Read the latest posts into a variable
          latest_posts=$(<latest-posts.md)

          # Replace the content between the <!-- BLOG-POST-LIST:START --> and <!-- BLOG-POST-LIST:END --> tags
          awk -v latest_posts="$latest_posts" '
          BEGIN {in_blog_list=0}
          /<!-- BLOG-POST-LIST:START -->/ {print; print latest_posts; in_blog_list=1; next}
          /<!-- BLOG-POST-LIST:END -->/ {print; in_blog_list=0; next}
          !in_blog_list {print}
          ' README.md > updated_readme.md

      - name: Check if README.md was updated
        id: check_changes
        run: |
          # Compare updated README.md with the current one
          if ! diff updated_readme.md README.md > /dev/null; then
            mv updated_readme.md README.md
            echo "changes_detected=true" >> $GITHUB_ENV
          else
            echo "README.md is up to date. No changes needed."
            echo "changes_detected=false" >> $GITHUB_ENV
            exit 0
          fi

      - name: Clean up untracked files
        run: |
          rm -f latest-posts.md updated_readme.md rss.xml

      - name: Commit Changes
        if: env.changes_detected == 'true'
        run: |
          git config --global user.name "GitHub README Updater"
          git config --global user.email "noreply@markhazleton.com"
          git add README.md
          git commit -m "Updated README with latest blog posts from markhazleton.com"
          git push
